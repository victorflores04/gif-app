{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGif","key","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"uLAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAiB5C,OACI,6BACI,0BAAMC,SAZM,SAACC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACrCN,EAAc,OAQT,4BAAKD,GACL,2BACAQ,KAAK,OACLC,MAAOT,EACPU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,uBCNlBG,EAAO,uCAAC,WAAOC,GAAP,uBAAAC,EAAA,6DACXC,EADW,iDACqCC,UAAWH,GADhD,+DAEEI,MAAMF,GAFR,cAEXG,EAFW,gBAGIA,EAAKC,OAHT,uBAGVC,EAHU,EAGVA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATzB,kBAaVM,GAbU,4CAAD,sDCAPO,EAAc,SAAC,GAAsB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEpC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCHJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAZ,SAACA,GAAc,IAAD,EACXd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAkBrC,OAZAC,qBAAU,WAEPxB,EAAQC,GAAUwB,MAAK,SAAAC,GACtBC,YAAY,WACRJ,EAAS,CACTf,KAAMkB,EACNL,SAAS,GACV,aAIL,CAACpB,IACIqB,EDhBuBM,CAAY3B,GAA9Ba,EAFuB,EAE5BN,KAAYa,EAFgB,EAEhBA,QAInB,OACI,oCACA,wBAAIJ,UAAU,qCAAqChB,GAClDoB,GAAW,uBAAGJ,UAAU,oCAAb,cACZ,yBAAKA,UAAU,aAIHH,EAAOJ,KAAK,SAAAC,GAAG,OACf,kBAAC,EAAD,eACAkB,IAAKlB,EAAIC,IACLD,UEhBXmB,EAAS,WAAO,IAAD,EAEY3C,mBAAS,CAAC,WAFtB,mBAEjB4C,EAFiB,KAEL7C,EAFK,KAQxB,OACI,6BACI,uCACD,kBAAC,EAAD,CAAaA,cAAeA,IAC3B,6BACA,4BAAK6C,EAAWrB,KAAI,SAAAT,GAAQ,OACxB,kBAAC,EAAD,CACA4B,IAAK5B,EACLA,SAAUA,U,MChB1B+B,IAASC,OAEL,kBAAC,EAAD,MAAWC,SAASC,eAAe,U","file":"static/js/main.a7082fec.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputvalue, setinputvalue] = useState('');\n\n    const handleInputChange = (e) =>{\n        setinputvalue(e.target.value);\n    }\n    const handleSummit =(e)=>{\n        e.preventDefault();\n\n        if(inputvalue.trim().length > 2){\n           setCategories(cats =>[inputvalue, ...cats]); \n           setinputvalue('');\n        }\n        \n    }\n\n    return (\n        <div>\n            <form onSubmit={handleSummit}>\n                <h1>{inputvalue}</h1>\n                <input  \n                type=\"text\"\n                value={inputvalue}\n                onChange={handleInputChange}\n                />  \n            </form>\n           \n        </div>\n    )\n}\nAddCategory.propTypes={\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGifs=async( category )=>{\n    const url =`https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category)}&limit=10&api_key=bxM2KumShvzKuxudgGdA9T732OapAUa3`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    \n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n\n        }\n    })\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({id, title, url }) => {\n    //console.log(id, title, url);\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGif } from '../hooks/useFetchGif';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images,loading} = useFetchGif(category);\n    //console.log(loading);\n\n   // getGifts();\n    return (\n        <>\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n        {loading && <p className=\"animate__animated animate__flash\">loading...</p>}\n        <div className=\"card-grid\">\n            \n         \n                {\n                    images.map( img => (\n                    <GifGridItem\n                    key={img.id}\n                    {...img}\n                    />\n                    ))\n                }\n       \n        </div>\n        </>\n\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\n\nexport const useFetchGif = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(()=>{\n\n       getGifs(category).then(imgs=>{\n        setTimeout( () => {\n            setState({\n            data: imgs,\n            loading: false\n         },3000);   \n        }) \n \n    })\n    },[category])\n    return state;\n}\n","import { useState } from \"react\";\nimport React from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifApp = () => {\n   \n    const [categories, setCategories] = useState(['Batman']);\n\n    // const handleAdd=()=>{\n    //     setCategories( cats =>[...categories, \"mari\"]);\n    // }\n\n    return (\n        <div>\n            <h2>Gif-App</h2>\n           <AddCategory setCategories={setCategories}/>\n            <hr/>\n            <ol>{categories.map(category=>(\n                <GifGrid \n                key={category}\n                category={category}/>\n                ))\n                }\n            </ol>\n\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifApp } from './GifApp';\nimport './index.css';\n\nReactDOM.render(\n \n    <GifApp />,document.getElementById('root')\n);\n"],"sourceRoot":""}